// <auto-generated />
using System;
using LigaTyperow.Helpers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LigaTyperow.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200105094140_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("LigaTyperow.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<int>("UserPoints")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LigaTyperow.Models.League.Bet", b =>
                {
                    b.Property<int>("BetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PointsToGain")
                        .HasColumnType("INTEGER");

                    b.HasKey("BetId");

                    b.HasIndex("MatchId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("LigaTyperow.Models.League.Footballer", b =>
                {
                    b.Property<int>("FootballerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Goals")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FootballerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Footballers");
                });

            modelBuilder.Entity("LigaTyperow.Models.League.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupName")
                        .HasColumnType("TEXT");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("LigaTyperow.Models.League.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GroupId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamAScore")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamATeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamBScore")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamBTeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MatchId");

                    b.HasIndex("GroupId1");

                    b.HasIndex("TeamATeamId");

                    b.HasIndex("TeamBTeamId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("LigaTyperow.Models.League.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortName")
                        .HasColumnType("TEXT");

                    b.HasKey("TeamId");

                    b.HasIndex("GroupId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("LigaTyperow.Models.League.Bet", b =>
                {
                    b.HasOne("LigaTyperow.Models.League.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId");
                });

            modelBuilder.Entity("LigaTyperow.Models.League.Footballer", b =>
                {
                    b.HasOne("LigaTyperow.Models.League.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LigaTyperow.Models.League.Match", b =>
                {
                    b.HasOne("LigaTyperow.Models.League.Group", null)
                        .WithMany("GroupMatches")
                        .HasForeignKey("GroupId1");

                    b.HasOne("LigaTyperow.Models.League.Team", "TeamA")
                        .WithMany()
                        .HasForeignKey("TeamATeamId");

                    b.HasOne("LigaTyperow.Models.League.Team", "TeamB")
                        .WithMany()
                        .HasForeignKey("TeamBTeamId");
                });

            modelBuilder.Entity("LigaTyperow.Models.League.Team", b =>
                {
                    b.HasOne("LigaTyperow.Models.League.Group", null)
                        .WithMany("Teams")
                        .HasForeignKey("GroupId");
                });
#pragma warning restore 612, 618
        }
    }
}
